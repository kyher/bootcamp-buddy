import type { NextPage } from "next";
import Head from "next/head";
import { useState, useEffect } from "react";
import { BackButton, FormSection } from "../../components";
import { ViewSection } from "../../components";
import { Activity } from "../../types";
import { WARMUP, EXERCISE, STRETCH, VIEW, REP, DURATION } from "../../consts";

const Create: NextPage = () => {
  const [activities, setActivities] = useState<Array<Activity>>([]);

  const [warmups, setWarmups] = useState<Activity>({
    title: "",
    type: "",
    repOrDuration: "",
  });

  const [exercises, setExercises] = useState<Activity>({
    title: "",
    type: "",
    repOrDuration: "",
  });

  const [stretches, setStretches] = useState<Activity>({
    title: "",
    type: "",
    repOrDuration: "",
  });

  const [currentStep, setcurrentStep] = useState(WARMUP);

  const [repOrDuration, setRepOrDuration] = useState("");

  useEffect(() => {
    localStorage.setItem("activities", JSON.stringify(activities));
  }, [activities]);

  const handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const name = event.target.name;
    const value = event.target.value;
    if (name === WARMUP) {
      setWarmups({ ...warmups, title: value });
    }
    if (name === EXERCISE) {
      setExercises({ ...exercises, title: value });
    }
    if (name === STRETCH) {
      setStretches({ ...stretches, title: value });
    }
  };

  const handleDurationChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const name = event.target.name;
    const value = parseInt(event.target.value);
    if (name === WARMUP) {
      setWarmups({ ...warmups, duration: value });
    }
    if (name === EXERCISE) {
      setExercises({ ...exercises, duration: value });
    }
    if (name === STRETCH) {
      setStretches({ ...stretches, duration: value });
    }
  };

  const handleRepChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const name = event.target.name;
    const value = parseInt(event.target.value);
    if (name === WARMUP) {
      setWarmups({ ...warmups, reps: value });
    }
    if (name === EXERCISE) {
      setExercises({ ...exercises, reps: value });
    }
    if (name === STRETCH) {
      setStretches({ ...stretches, reps: value });
    }
  };

  const handleRepOrDurationChange = (
    event: React.ChangeEvent<HTMLInputElement>
  ) => {
    const name = event.target.name;
    const value = event.target.value;
    setRepOrDuration(value);
    if (name === WARMUP) {
      setWarmups({ ...warmups, repOrDuration: value });
    }
    if (name === EXERCISE) {
      setExercises({ ...exercises, repOrDuration: value });
    }
    if (name === STRETCH) {
      setStretches({ ...stretches, repOrDuration: value });
    }
  };

  const handleSubmit = () => {
    if (currentStep === WARMUP) {
      setcurrentStep(EXERCISE);
      setRepOrDuration("");
    }
    if (currentStep === EXERCISE) {
      setcurrentStep(STRETCH);
      setRepOrDuration("");
    }
    if (currentStep === STRETCH) {
      setActivities([
        { ...warmups, type: WARMUP },
        { ...exercises, type: EXERCISE },
        { ...stretches, type: STRETCH },
      ]);
      localStorage.setItem("activities", JSON.stringify(activities));
      setcurrentStep(VIEW);
    }
  };

  return (
    <div className="grid place-items-center">
      <Head>
        <title>Create your workout</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <BackButton />
      <div>
        {currentStep === WARMUP && (
          <FormSection
            type={WARMUP}
            repOrDuration={repOrDuration}
            handleRepOrDurationChange={handleRepOrDurationChange}
            handleTitleChange={handleTitleChange}
            handleDurationChange={handleDurationChange}
            handleRepChange={handleRepChange}
            handleSubmit={handleSubmit}
          />
        )}
        {currentStep === EXERCISE && (
          <FormSection
            type={EXERCISE}
            repOrDuration={repOrDuration}
            handleRepOrDurationChange={handleRepOrDurationChange}
            handleTitleChange={handleTitleChange}
            handleDurationChange={handleDurationChange}
            handleRepChange={handleRepChange}
            handleSubmit={handleSubmit}
          />
        )}
        {currentStep === STRETCH && (
          <FormSection
            type={STRETCH}
            repOrDuration={repOrDuration}
            handleRepOrDurationChange={handleRepOrDurationChange}
            handleTitleChange={handleTitleChange}
            handleDurationChange={handleDurationChange}
            handleRepChange={handleRepChange}
            handleSubmit={handleSubmit}
          />
        )}
        {currentStep === VIEW && <ViewSection activities={activities} />}
      </div>
    </div>
  );
};

export default Create;
